{"version":3,"sources":["store/createReducer.js","store/reducer.js","serviceWorker.js","index.js","store/actions.js"],"names":["createReducer","initialState","handlers","state","action","hasOwnProperty","type","defaultState","posts","reducer","SET_POSTS","RESET_STATE","store","createStore","compose","Boolean","window","location","hostname","match","App","lazy","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAUeA,EAVO,SAACC,EAAcC,GACjC,OAAO,WAAgD,IAA/BC,EAA8B,uDAAtBF,EAAcG,EAAQ,uCAClD,OAAIF,EAASG,eAAeD,EAAOE,MACxBJ,EAASE,EAAOE,MAAMH,EAAOC,GAE7BD,I,OCDbI,EAAe,CACjBC,MAAO,MAGLC,EAAUT,EAAcO,GAAD,mBACxBG,KAAY,SAACP,EAAOC,GAAR,sBACND,EADM,CAETK,MAAOJ,EAAOI,WAHO,cAKxBG,KAAc,kBAAMJ,KALI,IAUdK,EAFDC,YAAYJ,EAASK,KCJfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAMC,gBAAK,kBAAM,uDAEvBC,IAASC,OAAO,kBAAC,IAAD,CAAUX,MAAOA,GAC7B,kBAAC,WAAD,CAAUY,SAAU,oDAChB,kBAACJ,EAAD,QAEKK,SAASC,eAAe,SDqH/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,+BEzI5B,oEACO,IAAM1B,EAAY,YAGZC,EAAc,gB","file":"static/js/main.f768cf7a.chunk.js","sourcesContent":["const createReducer = (initialState, handlers) => {\r\n    return function reducer(state = initialState, action) {\r\n        if (handlers.hasOwnProperty(action.type)) {\r\n            return handlers[action.type](state, action)\r\n        } else {\r\n            return state\r\n        }\r\n    }\r\n};\r\n\r\nexport default createReducer;","import { createStore, compose } from 'redux';\r\nimport createReducer from './createReducer';\r\nimport {SET_POSTS, RESET_STATE} from './actions';\r\n\r\nconst defaultState = {\r\n    posts: null\r\n};\r\n\r\nconst reducer = createReducer(defaultState, {\r\n    [SET_POSTS]: (state, action) => ({\r\n        ...state,   \r\n        posts: action.posts,\r\n    }),\r\n    [RESET_STATE]: () => defaultState,\r\n});\r\n\r\nconst store = createStore(reducer, compose);\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { lazy, Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport { Provider } from 'react-redux'\nimport store from \"../src/store/reducer\"\nimport * as serviceWorker from './serviceWorker';\n\nconst App = lazy(() => import('./App'))\n\nReactDOM.render(<Provider store={store}>\n    <Suspense fallback={<h1>Still Loadingâ€¦</h1>}>\n        <App />\n    </Suspense>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","// posts \r\nexport const SET_POSTS = 'SET_POSTS';\r\n\r\n// reset\r\nexport const RESET_STATE = 'RESET_STATE';"],"sourceRoot":""}